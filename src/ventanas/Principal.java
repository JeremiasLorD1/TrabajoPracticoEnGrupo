/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ventanas;

import com.mycompany.proyectointegrador_tomas_jeremias.AdministradorDeRecursos;
import com.mycompany.proyectointegrador_tomas_jeremias.Experimento;
import com.mycompany.proyectointegrador_tomas_jeremias.Experimento_Biologico;
import com.mycompany.proyectointegrador_tomas_jeremias.Experimento_Fisico;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import com.mycompany.proyectointegrador_tomas_jeremias.Cientifico;
import com.mycompany.proyectointegrador_tomas_jeremias.Equipo;
import javax.swing.ListSelectionModel;

import javax.swing.*;
import java.awt.*;
import java.util.Iterator;
import java.util.Vector;

/**
 *
 * @author jerem
 */
public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    ArrayList<Experimento> listaExperimentosBioFis;
    ArrayList<Equipo> auxListaEquipos;
    ArrayList<Cientifico> auxListaCientifico;
    int auxIndex;
// Esta es la informacion inicial de mi programa, ya que no se usar archivos. jijiji.

    AdministradorDeRecursos recursos;

    //Objeto auxiliar para cargar la lista
    //Data cargada
    public Principal() {
        initComponents();
        listaExperimentosBioFis = new ArrayList<>();
        auxListaCientifico = new ArrayList<>();
        auxListaEquipos = new ArrayList<>();
        recursos = new AdministradorDeRecursos();

        jListEquipos.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        // Seteo model Equipo
        DefaultListModel modelEquipo = new DefaultListModel();

        for (Equipo e : recursos.getListaEquipo()) {
            modelEquipo.addElement(e.getNombre());
        }
        jListEquipos.setModel(modelEquipo);

        // Carga de Cientifico 
        jListCientificos.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        // Seteo model Cientifico
        DefaultListModel modelCientifico = new DefaultListModel();
        for (Cientifico e : recursos.getListaCientifico()) {
            modelCientifico.addElement(e.getNombre() + " " + e.getApellido() + " " + e.getDni());
        }
        jListCientificos.setModel(modelCientifico);
        txtFenomeno.setVisible(false);
        txtOrganismo.setVisible(false);
        lFecha.setVisible(false);
        lOrganismo.setVisible(false);

//       jListCientificos.setCellRenderer(new NombreRenderer());
//       jListEquipos.setCellRenderer(new NombreRenderer());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        frenteAzul = new javax.swing.JPanel();
        jBtnCargarExperimento = new javax.swing.JButton();
        jBtnInformacion = new javax.swing.JButton();
        contenedor = new javax.swing.JPanel();
        cargarExperimento = new javax.swing.JPanel();
        jComboBoxTipos = new javax.swing.JComboBox<>();
        txtFenomeno = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jDaChInicioCientificos = new com.toedter.calendar.JDateChooser();
        jDaChFechaInicio = new com.toedter.calendar.JDateChooser();
        jLabel8 = new javax.swing.JLabel();
        lOrganismo = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtTitulo = new javax.swing.JTextField();
        txtPresupuesto = new javax.swing.JTextField();
        txtOrganismo = new javax.swing.JTextField();
        lFecha = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtADescripcion = new javax.swing.JTextArea();
        jBtnCargarCientifico = new javax.swing.JButton();
        jBtnEnviar = new javax.swing.JButton();
        JbtnModificarExperimento = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        jListMuestraExperimentos = new javax.swing.JList<>();
        jBtnEliminarExperimento = new javax.swing.JButton();
        jLabel31 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jListEquipos = new javax.swing.JList<>();
        jBtnCargarEquipo = new javax.swing.JButton();
        jLabel29 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jListCientificos = new javax.swing.JList<>();
        jLabel30 = new javax.swing.JLabel();
        jDaChFechaFin = new com.toedter.calendar.JDateChooser();
        jLabel5 = new javax.swing.JLabel();
        lFenomeno = new javax.swing.JLabel();
        jBtnEnviar2 = new javax.swing.JButton();
        modifica = new javax.swing.JPanel();
        jComboBoxTiposModifica = new javax.swing.JComboBox<>();
        txtFenomenoModifica = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jDaChFechaInicioModifica = new com.toedter.calendar.JDateChooser();
        jDaChFechaFinModifica = new com.toedter.calendar.JDateChooser();
        jLabel16 = new javax.swing.JLabel();
        lOrganismoModifica = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        txtTituloModifica = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        txtPresupuestoModifica = new javax.swing.JTextField();
        txtOrganismoModifica = new javax.swing.JTextField();
        lFenomenoModifica = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtADescripcionModifica = new javax.swing.JTextArea();
        btnEnviarModifica = new javax.swing.JButton();
        jBtnCargarCientificoModifica = new javax.swing.JButton();
        jScrollPane10 = new javax.swing.JScrollPane();
        jListCientificoModifica = new javax.swing.JList<>();
        jLabel34 = new javax.swing.JLabel();
        jBtnSeleccionEquipoModifica = new javax.swing.JButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        jListEquipoModifica = new javax.swing.JList<>();
        jLabel33 = new javax.swing.JLabel();
        jDaChInicioCientificos1 = new com.toedter.calendar.JDateChooser();
        lFenomeno1 = new javax.swing.JLabel();
        jPanelInformacion = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        frenteAzul.setBackground(new java.awt.Color(0, 51, 204));

        jBtnCargarExperimento.setText("Carga");
        jBtnCargarExperimento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCargarExperimentoActionPerformed1(evt);
            }
        });

        jBtnInformacion.setText("Informacion");
        jBtnInformacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnInformacionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout frenteAzulLayout = new javax.swing.GroupLayout(frenteAzul);
        frenteAzul.setLayout(frenteAzulLayout);
        frenteAzulLayout.setHorizontalGroup(
            frenteAzulLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frenteAzulLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jBtnCargarExperimento)
                .addGap(43, 43, 43)
                .addComponent(jBtnInformacion)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        frenteAzulLayout.setVerticalGroup(
            frenteAzulLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frenteAzulLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(frenteAzulLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtnCargarExperimento)
                    .addComponent(jBtnInformacion))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        contenedor.setLayout(new java.awt.CardLayout());

        cargarExperimento.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jComboBoxTipos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "Fisico", "Biologico" }));
        jComboBoxTipos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTiposActionPerformed(evt);
            }
        });
        cargarExperimento.add(jComboBoxTipos, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, -1, -1));

        txtFenomeno.setText("3");
        txtFenomeno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFenomenoActionPerformed(evt);
            }
        });
        cargarExperimento.add(txtFenomeno, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 230, 85, -1));

        jLabel7.setText("Fecha Fin");
        cargarExperimento.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 210, -1, -1));

        jLabel3.setText("Descripcion");
        cargarExperimento.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, -1, -1));

        jLabel6.setText("Fecha Inicio");
        cargarExperimento.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 150, -1, -1));
        cargarExperimento.add(jDaChInicioCientificos, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 350, 100, -1));
        cargarExperimento.add(jDaChFechaInicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 170, 130, -1));

        jLabel8.setText("Tipo");
        cargarExperimento.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, -1, -1));

        lOrganismo.setText("Organismo");
        cargarExperimento.add(lOrganismo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, -1, 13));

        jLabel28.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel28.setText("Carga Experimento");
        cargarExperimento.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, -1, 34));

        jLabel4.setText("Presupuesto");
        cargarExperimento.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 100, -1, -1));

        txtTitulo.setText("1");
        txtTitulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTituloActionPerformed(evt);
            }
        });
        cargarExperimento.add(txtTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 230, -1));

        txtPresupuesto.setText("2");
        txtPresupuesto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPresupuestoActionPerformed(evt);
            }
        });
        cargarExperimento.add(txtPresupuesto, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 120, 130, -1));

        txtOrganismo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtOrganismoActionPerformed(evt);
            }
        });
        cargarExperimento.add(txtOrganismo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 230, 85, -1));

        lFecha.setText("Fenomeno");
        cargarExperimento.add(lFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, -1, -1));

        txtADescripcion.setColumns(20);
        txtADescripcion.setRows(5);
        txtADescripcion.setText("412");
        jScrollPane2.setViewportView(txtADescripcion);

        cargarExperimento.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 290, 220, 110));

        jBtnCargarCientifico.setText("Seleccion");
        jBtnCargarCientifico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCargarCientificoActionPerformed(evt);
            }
        });
        cargarExperimento.add(jBtnCargarCientifico, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 350, -1, -1));

        jBtnEnviar.setText("Enviar");
        jBtnEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnEnviarActionPerformed(evt);
            }
        });
        cargarExperimento.add(jBtnEnviar, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 400, -1, -1));

        JbtnModificarExperimento.setText("Modificar");
        JbtnModificarExperimento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JbtnModificarExperimentoActionPerformed(evt);
            }
        });
        cargarExperimento.add(JbtnModificarExperimento, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 400, -1, -1));

        jScrollPane8.setViewportView(jListMuestraExperimentos);

        cargarExperimento.add(jScrollPane8, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 60, 200, 330));

        jBtnEliminarExperimento.setText("Eliminar");
        jBtnEliminarExperimento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnEliminarExperimentoActionPerformed(evt);
            }
        });
        cargarExperimento.add(jBtnEliminarExperimento, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 400, -1, -1));

        jLabel31.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel31.setText("Experimentos Cargados");
        cargarExperimento.add(jLabel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 10, -1, -1));

        jScrollPane6.setViewportView(jListEquipos);

        cargarExperimento.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 60, 170, 100));

        jBtnCargarEquipo.setText("Seleccion");
        jBtnCargarEquipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCargarEquipoActionPerformed(evt);
            }
        });
        cargarExperimento.add(jBtnCargarEquipo, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 170, -1, -1));

        jLabel29.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel29.setText("Cargar Equipo");
        cargarExperimento.add(jLabel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 10, -1, -1));

        jScrollPane7.setViewportView(jListCientificos);

        cargarExperimento.add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 230, 190, 100));

        jLabel30.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel30.setText("Cargar Cientifico");
        cargarExperimento.add(jLabel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 200, -1, -1));
        cargarExperimento.add(jDaChFechaFin, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 230, 130, -1));

        jLabel5.setText("Titulo");
        cargarExperimento.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, -1, -1));

        lFenomeno.setText("Fecha Contratacion");
        cargarExperimento.add(lFenomeno, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 330, -1, -1));

        jBtnEnviar2.setText("Enviar");
        jBtnEnviar2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnEnviar2ActionPerformed(evt);
            }
        });
        cargarExperimento.add(jBtnEnviar2, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 260, 140, 60));

        contenedor.add(cargarExperimento, "card4");

        modifica.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jComboBoxTiposModifica.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "...", "Fisico", "Biologico" }));
        jComboBoxTiposModifica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTiposModificaActionPerformed(evt);
            }
        });
        modifica.add(jComboBoxTiposModifica, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 144, -1, -1));
        modifica.add(txtFenomenoModifica, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 256, 85, -1));

        jLabel13.setText("Fecha Fin");
        modifica.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(109, 234, -1, -1));

        jLabel14.setText("Descripcion");
        modifica.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 290, -1, -1));

        jLabel15.setText("Fecha Inicio");
        modifica.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(109, 178, -1, -1));
        modifica.add(jDaChFechaInicioModifica, new org.netbeans.lib.awtextra.AbsoluteConstraints(109, 200, -1, -1));
        modifica.add(jDaChFechaFinModifica, new org.netbeans.lib.awtextra.AbsoluteConstraints(109, 256, -1, -1));

        jLabel16.setText("Tipo");
        modifica.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 122, -1, -1));

        lOrganismoModifica.setText("Organismo");
        modifica.add(lOrganismoModifica, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 178, -1, 13));

        jLabel32.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel32.setText("Carga Experimento");
        modifica.add(jLabel32, new org.netbeans.lib.awtextra.AbsoluteConstraints(26, 6, -1, 34));

        jLabel17.setText("Presupuesto");
        modifica.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(109, 122, -1, -1));

        txtTituloModifica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTituloModificaActionPerformed(evt);
            }
        });
        modifica.add(txtTituloModifica, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 88, 192, -1));

        jLabel18.setText("Titulo");
        modifica.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 66, -1, -1));

        txtPresupuestoModifica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPresupuestoModificaActionPerformed(evt);
            }
        });
        modifica.add(txtPresupuestoModifica, new org.netbeans.lib.awtextra.AbsoluteConstraints(109, 144, 90, -1));

        txtOrganismoModifica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtOrganismoModificaActionPerformed(evt);
            }
        });
        modifica.add(txtOrganismoModifica, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 198, 85, -1));

        lFenomenoModifica.setText("Fenomeno");
        modifica.add(lFenomenoModifica, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 234, -1, -1));

        txtADescripcionModifica.setColumns(20);
        txtADescripcionModifica.setRows(5);
        jScrollPane3.setViewportView(txtADescripcionModifica);

        modifica.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 318, 193, -1));

        btnEnviarModifica.setText("Enviar");
        btnEnviarModifica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviarModificaActionPerformed(evt);
            }
        });
        modifica.add(btnEnviarModifica, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 390, -1, -1));

        jBtnCargarCientificoModifica.setText("Seleccion");
        jBtnCargarCientificoModifica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCargarCientificoModificaActionPerformed(evt);
            }
        });
        modifica.add(jBtnCargarCientificoModifica, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 360, -1, -1));

        jScrollPane10.setViewportView(jListCientificoModifica);

        modifica.add(jScrollPane10, new org.netbeans.lib.awtextra.AbsoluteConstraints(253, 235, 162, 97));

        jLabel34.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel34.setText("Cargar Cientifico");
        modifica.add(jLabel34, new org.netbeans.lib.awtextra.AbsoluteConstraints(253, 195, -1, 34));

        jBtnSeleccionEquipoModifica.setText("Seleccion");
        jBtnSeleccionEquipoModifica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSeleccionEquipoModificaActionPerformed(evt);
            }
        });
        modifica.add(jBtnSeleccionEquipoModifica, new org.netbeans.lib.awtextra.AbsoluteConstraints(344, 166, -1, -1));

        jScrollPane9.setViewportView(jListEquipoModifica);

        modifica.add(jScrollPane9, new org.netbeans.lib.awtextra.AbsoluteConstraints(253, 62, 162, 98));

        jLabel33.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel33.setText("Cargar Equipo");
        modifica.add(jLabel33, new org.netbeans.lib.awtextra.AbsoluteConstraints(253, 18, -1, 34));
        modifica.add(jDaChInicioCientificos1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 360, 90, -1));

        lFenomeno1.setText("Fecha Contratacion");
        modifica.add(lFenomeno1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 340, -1, -1));

        contenedor.add(modifica, "card5");

        jLabel1.setText("Suma de presupuesto de todos los experimentos");

        javax.swing.GroupLayout jPanelInformacionLayout = new javax.swing.GroupLayout(jPanelInformacion);
        jPanelInformacion.setLayout(jPanelInformacionLayout);
        jPanelInformacionLayout.setHorizontalGroup(
            jPanelInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelInformacionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(26, 26, 26)
                .addComponent(jLabel2)
                .addContainerGap(674, Short.MAX_VALUE))
        );
        jPanelInformacionLayout.setVerticalGroup(
            jPanelInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelInformacionLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanelInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addContainerGap(408, Short.MAX_VALUE))
        );

        contenedor.add(jPanelInformacion, "card4");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contenedor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(frenteAzul, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(frenteAzul, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(contenedor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtTituloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTituloActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTituloActionPerformed

    private void jBtnCargarExperimentoActionPerformed1(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCargarExperimentoActionPerformed1
        // TODO add your handling code here:
        lFecha.setVisible(false);
        lOrganismo.setVisible(false);
        txtFenomeno.setVisible(false);
        txtOrganismo.setVisible(false);
        auxListaEquipos.clear();
        auxListaCientifico.clear();
        contenedor.removeAll();
        contenedor.add(cargarExperimento);
        contenedor.repaint();
        contenedor.revalidate();

        limpiarCampos();

    }//GEN-LAST:event_jBtnCargarExperimentoActionPerformed1

    // Funcion para limpiar campos
    private void limpiarCampos() {
        // Limpiar Titulo
        txtTitulo.setText("");

        // Limpiar Combo box
        jComboBoxTipos.setSelectedItem("-");

        // Limpiar Presupuesto
        txtPresupuesto.setText("");

        // Limpiar Descripcion
        txtADescripcion.setText("");

        // Limpiar Fecha inicio
        jDaChFechaInicio.setDate(null);

        // Limpiar Fecha fin
        jDaChFechaFin.setDate(null);

        // Limpiar Organismo
        txtFenomeno.setText("");

        // Limpiar Fenomeno
        txtOrganismo.setText("");

        // Seteo model de cientifico de 0
        DefaultListModel modelCientifico = new DefaultListModel();
        for (Cientifico e : recursos.getListaCientifico()) {
            modelCientifico.addElement(e.getNombre() + " " + e.getApellido() + " " + e.getDni());
        }
        jListCientificos.setModel(modelCientifico);

        // Fecha Contratacion
        jDaChInicioCientificos.setDate(null);

        // Seteo Model de Equipo de 0 
        DefaultListModel modelEquipo = new DefaultListModel();

        for (Equipo e : recursos.getListaEquipo()) {
            modelEquipo.addElement(e.getNombre());
        }
        jListEquipos.setModel(modelEquipo);

    }

    //Imprime lista BioFis para ver si esta bien cargada
    private void imprimirPorPantallaListaPrincipal() {
        int n = 0;
        for (Experimento e : listaExperimentosBioFis) {
            System.out.println("EXPERIMENTO: " + n++);
            System.out.println(e.getTitulo());
            System.out.println(e.getDescripcion());
            System.out.println(e.getFin());
            System.out.println(e.getInicio());
            System.out.println(e.getPresupuesto());
            int j = 0;
            for (Equipo i : e.getListaEquipo()) {
                System.out.println(i.getNombre() + " EQUIPO" + j++);//"""" IMPRRIME EL NOMBRE Y TAMBIEN IMPRIME EL SET MODEL ????""""
            }
            j = 0;
            for (Cientifico i : e.getListaCientifico()) {
                System.out.println(i.getNombre() + " CIENTIFICO" + j++);//"""" IMPRRIME EL NOMBRE Y TAMBIEN IMPRIME EL SET MODEL ????""""
            }
            if (e instanceof Experimento_Biologico) {
                System.out.println(((Experimento_Biologico) e).getOrganismo());
            } else if (e instanceof Experimento_Fisico) {
                System.out.println(((Experimento_Fisico) e).getFenomeno());
            }
        }
    }

    private void jComboBoxTiposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTiposActionPerformed
        // TODO add your handling code here:

        if ("Biologico".equals(jComboBoxTipos.getSelectedItem())) {
            lOrganismo.setVisible(true);
            txtOrganismo.setVisible(true);
            lFecha.setVisible(false);
            txtFenomeno.setVisible(false);
        } else if ("Fisico".equals(jComboBoxTipos.getSelectedItem())) {
            lFecha.setVisible(true);
            txtFenomeno.setVisible(true);
            lOrganismo.setVisible(false);
            txtOrganismo.setVisible(false);
        } else {
            lOrganismo.setVisible(false);
            txtOrganismo.setVisible(false);
            lFecha.setVisible(false);
            txtFenomeno.setVisible(false);
        }


    }//GEN-LAST:event_jComboBoxTiposActionPerformed

    private void txtOrganismoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtOrganismoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOrganismoActionPerformed

    private void jBtnInformacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnInformacionActionPerformed
        // TODO add your handling code here:
        contenedor.removeAll();
        contenedor.add(jPanelInformacion);
        contenedor.repaint();
        contenedor.revalidate();

        float auxTotal = 0;
        for (Experimento e : listaExperimentosBioFis) {
            auxTotal = e.getPresupuesto() + auxTotal;
        }
        jLabel2.setText(Float.toString(auxTotal));
    }//GEN-LAST:event_jBtnInformacionActionPerformed

    private void txtPresupuestoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPresupuestoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPresupuestoActionPerformed

    private void jBtnCargarCientificoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCargarCientificoActionPerformed

        // Cientifico 
        String auxCientifico = jListCientificos.getSelectedValue();

        // Control de cientifico 
        if (auxCientifico == null) {
            JOptionPane.showMessageDialog(null, "Seleccione un cientifico valido");
            return;
        }

        // Control de Fecha
        Date auxFecha = jDaChInicioCientificos.getDate();
        if (jDaChInicioCientificos.getDate() == null) {
            JOptionPane.showMessageDialog(null, "Error: Ingresa un valor de fecha válido.");
            return;
            // Manejar el caso en que las fechas sean nulas, por ejemplo, mostrar un mensaje de error
        }

// LLeno la lista auxiliar para luego pasarla al experimento.
        for (Cientifico e : recursos.getListaCientifico()) {
            if (auxCientifico.contains(e.getDni()) && auxCientifico.contains("-")) {
                auxListaCientifico.remove(e);
            }
            if ((e.getNombre() + " " + e.getApellido() + " " + e.getDni()).equals(auxCientifico)) {
                e.setContratacion(auxFecha);
                auxListaCientifico.add(e);
            }
        }
        // Lleno el model del jlist viendo si existe o no dentro de mis lista auxiliar.
//        DefaultListModel modelEquipo = new DefaultListModel();
        DefaultListModel modelCientifico = new DefaultListModel();
        for (Cientifico e : recursos.getListaCientifico()) {
            if (auxListaCientifico.contains(e)) {
                modelCientifico.addElement(e.getNombre() + " " + e.getApellido() + " " + e.getDni() + " - " + e.getContratacion());
            } else {
                modelCientifico.addElement(e.getNombre() + " " + e.getApellido() + " " + e.getDni());
            }
        }

        jListCientificos.setModel(modelCientifico);

        // Repintar contenedor
        contenedor.repaint();
        contenedor.revalidate();

        // TODO add your handling code here:

    }//GEN-LAST:event_jBtnCargarCientificoActionPerformed

    private void jComboBoxTiposModificaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTiposModificaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxTiposModificaActionPerformed

    private void txtTituloModificaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTituloModificaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTituloModificaActionPerformed

    private void txtPresupuestoModificaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPresupuestoModificaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPresupuestoModificaActionPerformed

    private void txtOrganismoModificaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtOrganismoModificaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOrganismoModificaActionPerformed

    /*private void jBtnCargarEquipoActionPerformed(java.awt.event.ActionEvent evt) {                                                 

        //Equipo
        String auxEquipo = jListEquipos.getSelectedValue();

        // Control de Equipo
        if (auxEquipo == null) {
            JOptionPane.showMessageDialog(null, "Seleccione un Equipo valido");
            return;
        }
        // LLeno la lista auxiliar para luego pasarla al experimento.
        for (Equipo e : recursos.getListaEquipo()) {
            if ((e.getNombre() + " - Seleccionado").equals(auxEquipo)) {
                auxListaEquipos.remove(e);
            }
            if ((e.getNombre()).equals(auxEquipo)) {
                auxListaEquipos.add(e);
            }
        }

        //Lleno el model del jlist viendo si existe o no dentro de mis lista auxiliar.
        DefaultListModel modelEquipo = new DefaultListModel();

        for (Equipo e : recursos.getListaEquipo()) {
            if (auxListaEquipos.contains(e)) {
                modelEquipo.addElement(e.getNombre() + " - Seleccionado");
            } else {
                modelEquipo.addElement(e.getNombre());
            }

        }

        jListEquipos.setModel(modelEquipo);

//        // Guardo en la lista auxiliar de equipo
//        Equipo equipo = new Equipo(auxEquipo);
//        auxListaEquipos.add(equipo);
        repaint();
        revalidate();

    }  */
    private void jBtnSeleccionEquipoModificaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSeleccionEquipoModificaActionPerformed
        //Equipo
        String auxEquipo = jListEquipoModifica.getSelectedValue();

        // Control de Equipo
        if (auxEquipo == null) {
            JOptionPane.showMessageDialog(null, "Seleccione un Equipo valido");
            return;
        }
        // LLeno la lista auxiliar para luego pasarla al experimento.
        for (Equipo e : recursos.getListaEquipo()) {
            if ((e.getNombre() + " - Seleccionado").equals(auxEquipo)) {
                auxListaEquipos.remove(e);
            }
            if ((e.getNombre()).equals(auxEquipo)) {
                auxListaEquipos.add(e);
            }
        }

        //Lleno el model del jlist viendo si existe o no dentro de mis lista auxiliar.
        DefaultListModel modelEquipo = new DefaultListModel();

        for (Equipo e : recursos.getListaEquipo()) {
            if (auxListaEquipos.contains(e)) {
                modelEquipo.addElement(e.getNombre() + " - Seleccionado");
            } else {
                modelEquipo.addElement(e.getNombre());
            }

        }

        jListEquipoModifica.setModel(modelEquipo);

//        // Guardo en la lista auxiliar de equipo
//        Equipo equipo = new Equipo(auxEquipo);
//        auxListaEquipos.add(equipo);
        repaint();
        revalidate();
    }//GEN-LAST:event_jBtnSeleccionEquipoModificaActionPerformed

    /*  private void jBtnCargarCientificoActionPerformed(java.awt.event.ActionEvent evt) {                                                     

        // Cientifico 
        String auxCientifico = jListCientificos.getSelectedValue();

        // Control de cientifico 
        if (auxCientifico == null) {
            JOptionPane.showMessageDialog(null, "Seleccione un cientifico valido");
            return;
        }

        // Control de Fecha
        Date auxFecha = jDaChInicioCientificos.getDate();
        if (jDaChInicioCientificos.getDate() == null) {
            JOptionPane.showMessageDialog(null, "Error: Ingresa un valor de fecha válido.");
            return;
            // Manejar el caso en que las fechas sean nulas, por ejemplo, mostrar un mensaje de error
        }

// LLeno la lista auxiliar para luego pasarla al experimento.
        for (Cientifico e : recursos.getListaCientifico()) {
            if (auxCientifico.contains(e.getDni()) && auxCientifico.contains("-")) {
                auxListaCientifico.remove(e);
            }
            if ((e.getNombre() + " " + e.getApellido() + " " + e.getDni()).equals(auxCientifico)) {
                e.setContratacion(auxFecha);
                auxListaCientifico.add(e);
            }
        }
        // Lleno el model del jlist viendo si existe o no dentro de mis lista auxiliar.
//        DefaultListModel modelEquipo = new DefaultListModel();
        DefaultListModel modelCientifico = new DefaultListModel();
        for (Cientifico e : recursos.getListaCientifico()) {
            if (auxListaCientifico.contains(e)) {
                modelCientifico.addElement(e.getNombre() + " " + e.getApellido() + " " + e.getDni() + " - " + e.getContratacion());
            } else {
                modelCientifico.addElement(e.getNombre() + " " + e.getApellido() + " " + e.getDni());
            }
        }

        jListCientificos.setModel(modelCientifico);

        // Repintar contenedor
        contenedor.repaint();
        contenedor.revalidate();

        // TODO add your handling code here:

    }  */
    
    private void jBtnCargarCientificoModificaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCargarCientificoModificaActionPerformed
         for(Cientifico elemento: auxListaCientifico){
             int i=0;
             System.out.println("Valores del cientifico "+(i++));
             System.out.println(elemento.getNombre()+elemento.getApellido()+elemento.getDni()+elemento.getEspecialidad());
         }
        // Cientifico 
        String auxCientifico = jListCientificoModifica.getSelectedValue();

        // Control de cientifico 
        if (auxCientifico == null) {
            JOptionPane.showMessageDialog(null, "Seleccione un cientifico valido");
            return;
        }

        // Control de Fecha
        Date auxFecha = jDaChInicioCientificos1.getDate();
        if (jDaChInicioCientificos1.getDate() == null) {
            JOptionPane.showMessageDialog(null, "Error: Ingresa un valor de fecha válido.");
            return;
            // Manejar el caso en que las fechas sean nulas, por ejemplo, mostrar un mensaje de error
        }
        
// LLeno la lista auxiliar para luego pasarla al experimento.
        for (Cientifico e : recursos.getListaCientifico()) {
            if (auxCientifico.contains(e.getDni()) && auxCientifico.contains("-")) {
                auxListaCientifico.remove(e);
            }
            if ((e.getNombre() + " " + e.getApellido() + " " + e.getDni()).equals(auxCientifico)) {
                e.setContratacion(auxFecha);
                auxListaCientifico.add(e);
            }
        }
        
        // Lleno el model del jlist viendo si existe o no dentro de mis lista auxiliar.
//        DefaultListModel modelEquipo = new DefaultListModel();
        DefaultListModel modelCientifico = new DefaultListModel();
        for (Cientifico e : recursos.getListaCientifico()) {
            if (auxListaCientifico.contains(e)) {
                modelCientifico.addElement(e.getNombre() + " " + e.getApellido() + " " + e.getDni() + " - " + e.getContratacion());
            } else {
                modelCientifico.addElement(e.getNombre() + " " + e.getApellido() + " " + e.getDni());
            }
        }

        jListCientificos.setModel(modelCientifico);

        // Repintar contenedor
        contenedor.repaint();
        contenedor.revalidate();

        // TODO add your handling code here:

    }//GEN-LAST:event_jBtnCargarCientificoModificaActionPerformed

    private void btnEnviarModificaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnviarModificaActionPerformed
        // TODO add your handling code here:
        // Titulo
        String expTitulo = txtTituloModifica.getText().trim();
        //Trim borra los espacios iniciales y si tiene un titulo de solo espacios lo toma como si fuera ""
        if ("".equals(expTitulo)) {
            JOptionPane.showMessageDialog(null, "Error: El campo de titulo esta vacio.");
            return;

        }
        // Descripcion
        String expDescripcion = txtADescripcionModifica.getText().trim();
        if ("".equals(expDescripcion)) {
            JOptionPane.showMessageDialog(null, "Error: El campo de descripcion esta vacio.");

            return;
        }

        // Fecha inicio
        Date expFechaInicioValue = jDaChFechaInicioModifica.getDate();
        if (jDaChFechaInicioModifica.getDate() == null) {
            JOptionPane.showMessageDialog(null, "Error: Ingresa un valor de fecha válido.");
            return;
            // Manejar el caso en que las fechas sean nulas, por ejemplo, mostrar un mensaje de error
        }

        // Fecha fin
        Date expFechaFinValue = jDaChFechaFinModifica.getDate();
        if (jDaChFechaFinModifica.getDate() == null) {
            JOptionPane.showMessageDialog(null, "Error: Ingresa un valor de fecha válido.");
            return;
            // Manejar el caso en que las fechas sean nulas, por ejemplo, mostrar un mensaje de error
        }

        // Presupuesto
        float expPresupuestoFloat;
        try {
            expPresupuestoFloat = Float.parseFloat(txtPresupuestoModifica.getText().trim());
            // Ahora tienes el valor en formato float
            // Lo que hacemos con el try es ver que sea un numero si no lansa la exepcion. Para que no se rompa el programa y lo atrapamos con
            //el catch.
        } catch (NumberFormatException e) {
            // Maneja aquí la excepción si la entrada no es un float válido
            JOptionPane.showMessageDialog(null, "Error: Ingresa un valor float válido.");
            return;
        }

        // Cientifico
        if (auxListaCientifico.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Error: No selecciono ningun cientifico.");
            return;
        }

        // Equipos
        if (auxListaEquipos.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Error: No selecciono ningun equipo.");
            return;
        }

        //Tipo
        //(String) castea lo seleccionado del combo box a tipo String.
        String expTipo = (String) jComboBoxTiposModifica.getSelectedItem();
        System.out.println(expTipo);
        if (jComboBoxTiposModifica.getSelectedItem().equals("-")) {
            JOptionPane.showMessageDialog(null, "Error: No selecciono ningun tipo.");
            return;
        }

        // Biologico
        if ("Biologico".equals(jComboBoxTiposModifica.getSelectedItem())) {
            // Organismo
            String expOrganismo = txtOrganismoModifica.getText().trim();
            if ("".equals(expOrganismo)) {
                JOptionPane.showMessageDialog(null, "Error: El campo de organismo esta vacio.");
                return;
            }
            listaExperimentosBioFis.remove(auxIndex);
            listaExperimentosBioFis.add(auxIndex,
                    new Experimento_Biologico(
                            expTitulo,
                            expDescripcion,
                            expPresupuestoFloat,
                            expTipo,
                            expFechaInicioValue,
                            expFechaFinValue,
                            (ArrayList<Cientifico>) auxListaCientifico.clone(),//Tengo que clonar la lista porque si lo hago de manera directa lo que pasa en realidad es que el puntero va a la direccion de memoria de la lista y esa esta permamentemente cambiando.
                            (ArrayList<Equipo>) auxListaEquipos.clone(),
                            expOrganismo));
            // Fisico
        } else if ("Fisico".equals(jComboBoxTiposModifica.getSelectedItem())) {
            // Fenomeno
            String expFenomeno = txtFenomenoModifica.getText().trim();
            if ("".equals(expFenomeno)) {
                JOptionPane.showMessageDialog(null, "Error: El campo de fenomeno esta vacio.");
                return;
            }
            listaExperimentosBioFis.remove(auxIndex);
            listaExperimentosBioFis.add(auxIndex,
                    new Experimento_Fisico(
                            expTitulo,
                            expDescripcion,
                            expPresupuestoFloat,
                            expTipo,
                            expFechaInicioValue,
                            expFechaFinValue,
                            (ArrayList<Cientifico>) auxListaCientifico.clone(),
                            (ArrayList<Equipo>) auxListaEquipos.clone(),
                            expFenomeno));

        } else {
            JOptionPane.showMessageDialog(null, "Error: elige un tipo de experimento.");
            return;

            //hay que poner que va a dar un error
            //cada vez que hay un campo vacio colocar un return
        }

        // Seteo el model del jlist experimentos. " HACER FUNCION "
        DefaultListModel model = new DefaultListModel();
        for (Experimento e : listaExperimentosBioFis) {
            model.addElement(e.getTitulo());
        }
        jListMuestraExperimentos.setModel(model);

        // Funcion para limpiar todo " Hacer todo"
        limpiarCampos();

        // Para ver si se cargan dentro de lista principal
        //
        //
        //        }
        imprimirPorPantallaListaPrincipal();

        auxListaEquipos.clear();
        auxListaCientifico.clear();
        contenedor.removeAll();
        contenedor.add(cargarExperimento);
        contenedor.repaint();
        contenedor.revalidate();


    }//GEN-LAST:event_btnEnviarModificaActionPerformed

    private void jBtnEliminarExperimentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnEliminarExperimentoActionPerformed
        // Titulo
        String expTitulo = txtTitulo.getText().trim();
        //Trim borra los espacios iniciales y si tiene un titulo de solo espacios lo toma como si fuera ""
        if ("".equals(expTitulo)) {
            JOptionPane.showMessageDialog(null, "Error: El campo de titulo esta vacio.");
            return;
        } else {
            for (Experimento exp : listaExperimentosBioFis) {
                if (exp.getTitulo().equals(txtTitulo.getText())) {
                    JOptionPane.showMessageDialog(null, "Error: El titulo ya existe en la lista");
                    return;
                }
            }
        }
        // Descripcion
        String expDescripcion = txtADescripcion.getText().trim();
        if ("".equals(expDescripcion)) {
            JOptionPane.showMessageDialog(null, "Error: El campo de descripcion esta vacio.");

            return;
        }

        // Fecha inicio
        Date expFechaInicioValue = jDaChFechaInicio.getDate();
        if (jDaChFechaInicio.getDate() == null) {
            JOptionPane.showMessageDialog(null, "Error: Ingresa un valor de fecha válido.");
            return;
            // Manejar el caso en que las fechas sean nulas, por ejemplo, mostrar un mensaje de error
        }

        // Fecha fin
        Date expFechaFinValue = jDaChFechaFin.getDate();
        if (jDaChFechaFin.getDate() == null) {
            JOptionPane.showMessageDialog(null, "Error: Ingresa un valor de fecha válido.");
            return;
            // Manejar el caso en que las fechas sean nulas, por ejemplo, mostrar un mensaje de error
        }

        // Presupuesto
        float expPresupuestoFloat;
        try {
            expPresupuestoFloat = Float.parseFloat(txtPresupuesto.getText().trim());
            // Ahora tienes el valor en formato float
            // Lo que hacemos con el try es ver que sea un numero si no lansa la exepcion. Para que no se rompa el programa y lo atrapamos con
            //el catch.
        } catch (NumberFormatException e) {
            // Maneja aquí la excepción si la entrada no es un float válido
            JOptionPane.showMessageDialog(null, "Error: Ingresa un valor float válido.");
            return;
        }

        // Cientifico
        if (auxListaCientifico.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Error: No selecciono ningun cientifico.");
            return;
        }

        // Equipos
        if (auxListaEquipos.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Error: No selecciono ningun equipo.");
            return;
        }

        //Tipo
        //(String) castea lo seleccionado del combo box a tipo String.
        String expTipo = (String) jComboBoxTipos.getSelectedItem();
        System.out.println(expTipo);
        if (jComboBoxTipos.getSelectedItem().equals("-")) {
            JOptionPane.showMessageDialog(null, "Error: No selecciono ningun tipo.");
            return;
        }

        // Biologico
        if ("Biologico".equals(jComboBoxTipos.getSelectedItem())) {
            // Organismo
            String expOrganismo = txtOrganismo.getText().trim();
            if ("".equals(expOrganismo)) {
                JOptionPane.showMessageDialog(null, "Error: El campo de organismo esta vacio.");
                return;
            }
            listaExperimentosBioFis.add(
                    new Experimento_Biologico(
                            expTitulo,
                            expDescripcion,
                            expPresupuestoFloat,
                            expTipo,
                            expFechaInicioValue,
                            expFechaFinValue,
                            (ArrayList<Cientifico>) auxListaCientifico.clone(),//Tengo que clonar la lista porque si lo hago de manera directa lo que pasa en realidad es que el puntero va a la direccion de memoria de la lista y esa esta permamentemente cambiando.
                            (ArrayList<Equipo>) auxListaEquipos.clone(),
                            expOrganismo));
            // Fisico
        } else if ("Fisico".equals(jComboBoxTipos.getSelectedItem())) {
            // Fenomeno
            String expFenomeno = txtFenomeno.getText().trim();
            if ("".equals(expFenomeno)) {
                JOptionPane.showMessageDialog(null, "Error: El campo de fenomeno esta vacio.");
                return;
            }
            listaExperimentosBioFis.add(
                    new Experimento_Fisico(
                            expTitulo,
                            expDescripcion,
                            expPresupuestoFloat,
                            expTipo,
                            expFechaInicioValue,
                            expFechaFinValue,
                            (ArrayList<Cientifico>) auxListaCientifico.clone(),
                            (ArrayList<Equipo>) auxListaEquipos.clone(),
                            expFenomeno));

        } else {
            JOptionPane.showMessageDialog(null, "Error: elige un tipo de experimento.");
            return;

            //hay que poner que va a dar un error
            //cada vez que hay un campo vacio colocar un return
        }

        // Seteo el model del jlist experimentos. " HACER FUNCION "
        DefaultListModel model = new DefaultListModel();
        for (Experimento e : listaExperimentosBioFis) {
            model.addElement(e.getTitulo());
        }
        jListMuestraExperimentos.setModel(model);

        // Funcion para limpiar todo " Hacer todo"
        limpiarCampos();

        contenedor.repaint();
        contenedor.revalidate();

        // Para ver si se cargan dentro de lista principal
        //
        //
        //        }
        imprimirPorPantallaListaPrincipal();

        auxListaEquipos.clear();
        auxListaCientifico.clear();


    }//GEN-LAST:event_jBtnEliminarExperimentoActionPerformed

    private void JbtnModificarExperimentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JbtnModificarExperimentoActionPerformed
        // TODO add your handling code here:

        imprimirPorPantallaListaPrincipal();
        auxIndex = 0;

        for (Experimento e : listaExperimentosBioFis) {
            for (Cientifico i : e.getListaCientifico()) {
                System.out.println(i.getNombre());
            }
        }

        if (jListMuestraExperimentos.getSelectedValue() == null) {
            JOptionPane.showMessageDialog(null, "Error: Seleccione un experimento de la lista.");
            return;
        }
        Experimento aux = null;

        // Busco el elemento seleccionado de la lista dentro de mi lista principal
        for (Experimento exp : listaExperimentosBioFis) {
            if (jListMuestraExperimentos.getSelectedValue().equals(exp.getTitulo())) {
                for (Equipo e : exp.getListaEquipo()) {
                    System.out.println(e.getNombre());
                }
                aux = exp;

                // Guardamos index para luego borrar y guardar en la misma posicion
                auxIndex = listaExperimentosBioFis.indexOf(exp);
            }
        }
        if (aux == null) {
            JOptionPane.showMessageDialog(null, "Esto no va a suceder nunca");
            return;
        }
        contenedor.removeAll();
        contenedor.add(modifica);
        contenedor.repaint();
        contenedor.revalidate();

        // Modifica Titulo
        txtTituloModifica.setText(aux.getTitulo());

        // Modifica Descripcion
        txtADescripcionModifica.setText(aux.getDescripcion());

        // Modifica Presupuesto
        txtPresupuestoModifica.setText(Float.toString(aux.getPresupuesto()));

        //Modifica ComboBox
        jComboBoxTiposModifica.setSelectedItem(aux.getTipo());

        if (aux.getTipo().equals("Biologico")) {
            // Modifica Organismo
            Experimento_Biologico name = (Experimento_Biologico) aux;
            txtOrganismoModifica.setText(name.getOrganismo());
            txtFenomenoModifica.setVisible(false);
            lFenomenoModifica.setVisible(false);

        } else {
            // Modifica Fenomeno
            Experimento_Fisico name = (Experimento_Fisico) aux;
            txtFenomenoModifica.setText(name.getFenomeno());
            txtOrganismoModifica.setVisible(false);
            lOrganismoModifica.setVisible(false);

        }

        // Modifica Lista Equipo
        DefaultListModel modelEquipo = new DefaultListModel();

        System.out.println(aux.getListaEquipo().isEmpty());

        for (Equipo e : aux.getListaEquipo()) {
            System.out.println(e.getNombre());
            System.out.println("hola");
        }

        for (Equipo e : recursos.getListaEquipo()) {
            if (aux.getListaEquipo().contains(e)) {
                modelEquipo.addElement(e.getNombre() + " - Seleccionado");
                System.out.println("Hola");//NO ENTRA A ESTO PORQUE NO TIENE INFO 
            } else {
                modelEquipo.addElement(e.getNombre());

            }

        }

        jListEquipoModifica.setModel(modelEquipo);

        // Modifica Lista Cientifico
        DefaultListModel modelCientifico = new DefaultListModel();
        for (Cientifico c : recursos.getListaCientifico()) {
            if (aux.getListaCientifico().contains(c)) {
                modelCientifico.addElement(c.getNombre() + " " + c.getApellido() +" "+c.getDni()+ "-" + c.getContratacion());
                System.out.println("Hola");//NO ENTRA A ESTO
            } else {
                modelCientifico.addElement(c.getNombre() + " " + c.getApellido()+" "+c.getDni());
            }
        }
        jListCientificoModifica.setModel(modelCientifico);

        // Modifica Fecha Fin
        jDaChFechaInicioModifica.setDate(aux.getFin());
        // Modifica Fecha Inicio
        jDaChFechaFinModifica.setDate(aux.getInicio());

        // LLeno la lista auxiliar para luego pasarla al experimento que voy a modificar.
        auxListaEquipos = (ArrayList<Equipo>) (listaExperimentosBioFis.get(auxIndex).getListaEquipo()).clone();
        // LLeno la lista auxiliar para luego pasarla al experimento que voy a modificar.
        auxListaCientifico = (ArrayList<Cientifico>) (listaExperimentosBioFis.get(auxIndex).getListaCientifico()).clone();
        
        contenedor.repaint();
        contenedor.revalidate();
    }//GEN-LAST:event_JbtnModificarExperimentoActionPerformed

    private void jBtnCargarEquipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCargarEquipoActionPerformed

        //Equipo
        String auxEquipo = jListEquipos.getSelectedValue();

        // Control de Equipo
        if (auxEquipo == null) {
            JOptionPane.showMessageDialog(null, "Seleccione un Equipo valido");
            return;
        }
        // LLeno la lista auxiliar para luego pasarla al experimento.
        for (Equipo e : recursos.getListaEquipo()) {
            if ((e.getNombre() + " - Seleccionado").equals(auxEquipo)) {
                auxListaEquipos.remove(e);
            }
            if ((e.getNombre()).equals(auxEquipo)) {
                auxListaEquipos.add(e);
            }
        }

        //Lleno el model del jlist viendo si existe o no dentro de mis lista auxiliar.
        DefaultListModel modelEquipo = new DefaultListModel();

        for (Equipo e : recursos.getListaEquipo()) {
            if (auxListaEquipos.contains(e)) {
                modelEquipo.addElement(e.getNombre() + " - Seleccionado");
            } else {
                modelEquipo.addElement(e.getNombre());
            }

        }

        jListEquipos.setModel(modelEquipo);

//        // Guardo en la lista auxiliar de equipo
//        Equipo equipo = new Equipo(auxEquipo);
//        auxListaEquipos.add(equipo);
        repaint();
        revalidate();

    }//GEN-LAST:event_jBtnCargarEquipoActionPerformed

    private void txtFenomenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFenomenoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFenomenoActionPerformed

    private void jBtnEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnEnviarActionPerformed

        // Titulo
        String expTitulo = txtTitulo.getText().trim();
        //Trim borra los espacios iniciales y si tiene un titulo de solo espacios lo toma como si fuera ""
        if ("".equals(expTitulo)) {
            JOptionPane.showMessageDialog(null, "Error: El campo de titulo esta vacio.");
            return;
        } else {
            for (Experimento exp : listaExperimentosBioFis) {
                if (exp.getTitulo().equals(txtTitulo.getText())) {
                    JOptionPane.showMessageDialog(null, "Error: El titulo ya existe en la lista");
                    return;
                }
            }
        }
        // Descripcion
        String expDescripcion = txtADescripcion.getText().trim();
        if ("".equals(expDescripcion)) {
            JOptionPane.showMessageDialog(null, "Error: El campo de descripcion esta vacio.");

            return;
        }

        // Fecha inicio
        Date expFechaInicioValue = jDaChFechaInicio.getDate();
        if (jDaChFechaInicio.getDate() == null) {
            JOptionPane.showMessageDialog(null, "Error: Ingresa un valor de fecha válido.");
            return;
            // Manejar el caso en que las fechas sean nulas, por ejemplo, mostrar un mensaje de error
        }

        // Fecha fin
        Date expFechaFinValue = jDaChFechaFin.getDate();
        if (jDaChFechaFin.getDate() == null) {
            JOptionPane.showMessageDialog(null, "Error: Ingresa un valor de fecha válido.");
            return;
            // Manejar el caso en que las fechas sean nulas, por ejemplo, mostrar un mensaje de error
        }

        // Presupuesto
        float expPresupuestoFloat;
        try {
            expPresupuestoFloat = Float.parseFloat(txtPresupuesto.getText().trim());
            // Ahora tienes el valor en formato float
            // Lo que hacemos con el try es ver que sea un numero si no lansa la exepcion. Para que no se rompa el programa y lo atrapamos con
            //el catch.
        } catch (NumberFormatException e) {
            // Maneja aquí la excepción si la entrada no es un float válido
            JOptionPane.showMessageDialog(null, "Error: Ingresa un valor float válido.");
            return;
        }

        // Cientifico
        if (auxListaCientifico.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Error: No selecciono ningun cientifico.");
            return;
        }

        // Equipos
        if (auxListaEquipos.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Error: No selecciono ningun equipo.");
            return;
        }

        //Tipo
        //(String) castea lo seleccionado del combo box a tipo String.
        String expTipo = (String) jComboBoxTipos.getSelectedItem();
        System.out.println(expTipo);
        if (jComboBoxTipos.getSelectedItem().equals("-")) {
            JOptionPane.showMessageDialog(null, "Error: No selecciono ningun tipo.");
            return;
        }

        // Biologico
        if ("Biologico".equals(jComboBoxTipos.getSelectedItem())) {
            // Organismo
            String expOrganismo = txtOrganismo.getText().trim();
            if ("".equals(expOrganismo)) {
                JOptionPane.showMessageDialog(null, "Error: El campo de organismo esta vacio.");
                return;
            }
            listaExperimentosBioFis.add(
                    new Experimento_Biologico(
                            expTitulo,
                            expDescripcion,
                            expPresupuestoFloat,
                            expTipo,
                            expFechaInicioValue,
                            expFechaFinValue,
                            (ArrayList<Cientifico>) auxListaCientifico.clone(),//Tengo que clonar la lista porque si lo hago de manera directa lo que pasa en realidad es que el puntero va a la direccion de memoria de la lista y esa esta permamentemente cambiando.
                            (ArrayList<Equipo>) auxListaEquipos.clone(),
                            expOrganismo));
            // Fisico
        } else if ("Fisico".equals(jComboBoxTipos.getSelectedItem())) {
            // Fenomeno
            String expFenomeno = txtFenomeno.getText().trim();
            if ("".equals(expFenomeno)) {
                JOptionPane.showMessageDialog(null, "Error: El campo de fenomeno esta vacio.");
                return;
            }
            listaExperimentosBioFis.add(
                    new Experimento_Fisico(
                            expTitulo,
                            expDescripcion,
                            expPresupuestoFloat,
                            expTipo,
                            expFechaInicioValue,
                            expFechaFinValue,
                            (ArrayList<Cientifico>) auxListaCientifico.clone(),
                            (ArrayList<Equipo>) auxListaEquipos.clone(),
                            expFenomeno));

        } else {
            JOptionPane.showMessageDialog(null, "Error: elige un tipo de experimento.");
            return;

            //hay que poner que va a dar un error
            //cada vez que hay un campo vacio colocar un return
        }

        // Seteo el model del jlist experimentos. " HACER FUNCION "
        DefaultListModel model = new DefaultListModel();
        for (Experimento e : listaExperimentosBioFis) {
            model.addElement(e.getTitulo());
        }
        jListMuestraExperimentos.setModel(model);

        // Funcion para limpiar todo " Hacer todo"
        limpiarCampos();

        contenedor.repaint();
        contenedor.revalidate();

        // Para ver si se cargan dentro de lista principal
        //
        //
        //        }
        imprimirPorPantallaListaPrincipal();

        auxListaEquipos.clear();
        auxListaCientifico.clear();
    }//GEN-LAST:event_jBtnEnviarActionPerformed

    private void jBtnEnviar2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnEnviar2ActionPerformed
        imprimirPorPantallaListaPrincipal();
        // TODO add your handling code here:
    }//GEN-LAST:event_jBtnEnviar2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JbtnModificarExperimento;
    private javax.swing.JButton btnEnviarModifica;
    private javax.swing.JPanel cargarExperimento;
    private javax.swing.JPanel contenedor;
    private javax.swing.JPanel frenteAzul;
    private javax.swing.JButton jBtnCargarCientifico;
    private javax.swing.JButton jBtnCargarCientificoModifica;
    private javax.swing.JButton jBtnCargarEquipo;
    private javax.swing.JButton jBtnCargarExperimento;
    private javax.swing.JButton jBtnEliminarExperimento;
    private javax.swing.JButton jBtnEnviar;
    private javax.swing.JButton jBtnEnviar2;
    private javax.swing.JButton jBtnInformacion;
    private javax.swing.JButton jBtnSeleccionEquipoModifica;
    private javax.swing.JComboBox<String> jComboBoxTipos;
    private javax.swing.JComboBox<String> jComboBoxTiposModifica;
    private com.toedter.calendar.JDateChooser jDaChFechaFin;
    private com.toedter.calendar.JDateChooser jDaChFechaFinModifica;
    private com.toedter.calendar.JDateChooser jDaChFechaInicio;
    private com.toedter.calendar.JDateChooser jDaChFechaInicioModifica;
    private com.toedter.calendar.JDateChooser jDaChInicioCientificos;
    private com.toedter.calendar.JDateChooser jDaChInicioCientificos1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JList<String> jListCientificoModifica;
    private javax.swing.JList<String> jListCientificos;
    private javax.swing.JList<String> jListEquipoModifica;
    private javax.swing.JList<String> jListEquipos;
    private javax.swing.JList<String> jListMuestraExperimentos;
    private javax.swing.JPanel jPanelInformacion;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JLabel lFecha;
    private javax.swing.JLabel lFenomeno;
    private javax.swing.JLabel lFenomeno1;
    private javax.swing.JLabel lFenomenoModifica;
    private javax.swing.JLabel lOrganismo;
    private javax.swing.JLabel lOrganismoModifica;
    private javax.swing.JPanel modifica;
    private javax.swing.JTextArea txtADescripcion;
    private javax.swing.JTextArea txtADescripcionModifica;
    private javax.swing.JTextField txtFenomeno;
    private javax.swing.JTextField txtFenomenoModifica;
    private javax.swing.JTextField txtOrganismo;
    private javax.swing.JTextField txtOrganismoModifica;
    private javax.swing.JTextField txtPresupuesto;
    private javax.swing.JTextField txtPresupuestoModifica;
    private javax.swing.JTextField txtTitulo;
    private javax.swing.JTextField txtTituloModifica;
    // End of variables declaration//GEN-END:variables
}
